generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model PasswordResetToken {
  tokenHash String   @unique
  expiresAt DateTime
  userId    String
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
}

model Organization {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  name        String
  memberships Membership[]
}

enum MembershipRole {
  ADMIN
  MEMBER
}

model Membership {
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String

  joinedAt       DateTime       @default(now())
  isActive       Boolean
  membershipRole MembershipRole @default(MEMBER)

  @@id(name: "membershipId", [organizationId, userId])
  @@index([organizationId])
  @@index([userId])
}

model User {
  id                     String                   @id @default(cuid())
  username               String                   @unique
  email                  String                   @unique
  emailVerified          Boolean                  @default(false)
  passwordHash           String
  sessions               Session[]
  tradings               Trading[]
  comments               Comment[]
  memberships            Membership[]
  PasswordResetToken     PasswordResetToken[]
  EmailVerificationToken EmailVerificationToken[]
}

model Session {
  id        String   @id
  expiresAt DateTime
  userId    String
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
}

model Trading {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  title     String
  content   String        @db.VarChar(1024)
  status    TradingStatus @default(OPEN)
  deadline  String
  bounty    Int
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comments  Comment[]

  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  content   String   @db.VarChar(1024)
  trading   Trading  @relation(fields: [tradingId], references: [id], onDelete: Cascade)
  tradingId String
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId    String?

  @@index([tradingId])
  @@index([userId])
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  code      String
  expiresAt DateTime
  email     String
  userId    String
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
}

enum TradingStatus {
  OPEN
  IN_PROGRESS
  DONE
}
